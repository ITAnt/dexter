From 9f4f4472ae0e0dc20e2f69cfe6312140421b30c5 Mon Sep 17 00:00:00 2001
From: David Brazdil <david.brazdil@gmail.com>
Date: Tue, 17 Sep 2013 20:52:08 +0200
Subject: [PATCH] SSA form dump

---
 dx/src/com/android/dx/ssa/Optimizer.java | 75 +++++++++++++++++++++++++++++++-
 1 file changed, 74 insertions(+), 1 deletion(-)

diff --git a/dx/src/com/android/dx/ssa/Optimizer.java b/dx/src/com/android/dx/ssa/Optimizer.java
index 8c2e284..4146170 100644
--- a/dx/src/com/android/dx/ssa/Optimizer.java
+++ b/dx/src/com/android/dx/ssa/Optimizer.java
@@ -16,17 +16,26 @@
 
 package com.android.dx.ssa;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.EnumSet;
+
 import com.android.dx.rop.code.RopMethod;
 import com.android.dx.rop.code.TranslationAdvice;
 import com.android.dx.ssa.back.LivenessAnalyzer;
 import com.android.dx.ssa.back.SsaToRop;
-import java.util.EnumSet;
+import com.android.dx.util.Hex;
+import com.android.dx.util.IntList;
+
+import dk.netarkivet.common.utils.SparseBitSet;
 
 /**
  * Runs a method through the SSA form conversion, any optimization algorithms,
  * and returns it to rop form.
  */
 public class Optimizer {
+	public static boolean DEBUG_SSA_DUMP = false;
+	
     private static boolean preserveLocals = true;
 
     private static TranslationAdvice advice;
@@ -97,6 +106,9 @@ public class Optimizer {
 
         ssaMeth = SsaConverter.convertToSsaMethod(rmeth, paramWidth, isStatic);
         runSsaFormSteps(ssaMeth, steps);
+        
+        if (DEBUG_SSA_DUMP)
+        	dumpSSA(ssaMeth);
 
         RopMethod resultMeth = SsaToRop.convertToRopMethod(ssaMeth, false);
 
@@ -253,4 +265,65 @@ public class Optimizer {
 
         return ssaMeth;
     }
+
+    private static void dumpSSA(SsaMethod ssaMeth) {
+
+        StringBuffer sb = new StringBuffer(2000);
+
+        sb.append("first ");
+        sb.append(Hex.u2(ssaMeth.blockIndexToRopLabel(ssaMeth.getEntryBlockIndex())));
+        sb.append('\n');
+
+        ArrayList<SsaBasicBlock> blocks = ssaMeth.getBlocks();
+        ArrayList<SsaBasicBlock> sortedBlocks = (ArrayList<SsaBasicBlock>) blocks.clone();
+        Collections.sort(sortedBlocks, SsaBasicBlock.LABEL_COMPARATOR);
+
+        for (SsaBasicBlock block : sortedBlocks) {
+            sb.append("block ")
+                    .append(Hex.u2(block.getRopLabel())).append('\n');
+
+            SparseBitSet preds = block.getPredecessors();
+
+            for (int i = preds.nextSetBit(0); i >= 0;
+                 i = preds.nextSetBit(i+1)) {
+                sb.append("  pred ");
+                sb.append(Hex.u2(ssaMeth.blockIndexToRopLabel(i)));
+                sb.append('\n');
+            }
+
+            sb.append("  live in:" + block.getLiveInRegs());
+            sb.append("\n");
+
+            for (SsaInsn insn : block.getInsns()) {
+                sb.append("  ");
+                sb.append(insn.toHuman());
+                sb.append('\n');
+            }
+
+            if (block.getSuccessors().cardinality() == 0) {
+                sb.append("  returns\n");
+            } else {
+                int primary = block.getPrimarySuccessorRopLabel();
+
+                IntList succLabelList = block.getRopLabelSuccessorList();
+
+                int szSuccLabels = succLabelList.size();
+
+                for (int i = 0; i < szSuccLabels; i++) {
+                    sb.append("  next ");
+                    sb.append(Hex.u2(succLabelList.get(i)));
+
+                    if (szSuccLabels != 1 && primary == succLabelList.get(i)) {
+                        sb.append(" *");
+                    }
+                    sb.append('\n');
+                }
+            }
+
+            sb.append("  live out:" + block.getLiveOutRegs());
+            sb.append("\n");
+        }
+
+        System.err.println(sb.toString());
+    }
 }
-- 
1.8.4

