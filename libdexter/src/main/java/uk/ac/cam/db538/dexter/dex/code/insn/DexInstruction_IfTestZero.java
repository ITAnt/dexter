// Generated by delombok at Fri Jul 19 13:12:59 UTC 2013
package uk.ac.cam.db538.dexter.dex.code.insn;

import java.util.Set;
import org.jf.dexlib.Code.Instruction;
import org.jf.dexlib.Code.Format.Instruction21t;
import uk.ac.cam.db538.dexter.dex.code.CodeParserState;
import uk.ac.cam.db538.dexter.dex.code.InstructionList;
import uk.ac.cam.db538.dexter.dex.code.elem.DexCodeElement;
import uk.ac.cam.db538.dexter.dex.code.elem.DexLabel;
import uk.ac.cam.db538.dexter.dex.code.reg.DexRegister;
import uk.ac.cam.db538.dexter.dex.code.reg.DexSingleRegister;
import uk.ac.cam.db538.dexter.hierarchy.RuntimeHierarchy;
import com.google.common.collect.Sets;

public class DexInstruction_IfTestZero extends DexInstruction {
	private final DexSingleRegister reg;
	private final DexLabel target;
	private final Opcode_IfTestZero insnOpcode;
	
	public DexInstruction_IfTestZero(DexSingleRegister reg, DexLabel target, Opcode_IfTestZero opcode, RuntimeHierarchy hierarchy) {
		super(hierarchy);
		this.reg = reg;
		this.target = target;
		this.insnOpcode = opcode;
	}
	
	public static DexInstruction_IfTestZero parse(Instruction insn, CodeParserState parsingState) {
		if (insn instanceof Instruction21t && Opcode_IfTestZero.convert(insn.opcode) != null) {
			final org.jf.dexlib.Code.Format.Instruction21t insnIfTestZero = (Instruction21t)insn;
			return new DexInstruction_IfTestZero(parsingState.getSingleRegister(insnIfTestZero.getRegisterA()), parsingState.getLabel(insnIfTestZero.getTargetAddressOffset(), insn), Opcode_IfTestZero.convert(insn.opcode), parsingState.getHierarchy());
		} else throw FORMAT_EXCEPTION;
	}
	
	@Override
	public String toString() {
		return "if-" + insnOpcode.name() + " " + reg.toString() + ", " + target.toString();
	}
	
	@Override
	public boolean cfgEndsBasicBlock() {
		return true;
	}
	
	@Override
	public Set<? extends DexCodeElement> cfgJumpTargets(InstructionList code) {
		return Sets.newHashSet(target, code.getFollower(this));
	}
	
	@Override
	public Set<? extends DexRegister> lvaReferencedRegisters() {
		return Sets.newHashSet(reg);
	}
	
	@Override
	public void instrument() {
	}
	
	@Override
	public void accept(DexInstructionVisitor visitor) {
		visitor.visit(this);
	}
	
	@java.lang.SuppressWarnings("all")
	public DexSingleRegister getReg() {
		return this.reg;
	}
	
	@java.lang.SuppressWarnings("all")
	public DexLabel getTarget() {
		return this.target;
	}
	
	@java.lang.SuppressWarnings("all")
	public Opcode_IfTestZero getInsnOpcode() {
		return this.insnOpcode;
	}
}